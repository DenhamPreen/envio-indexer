type TransferV1 {
  id: ID!
  from: String!
  to: String!
  amount: BigInt!
}

type OrganizationV1 {
  id: ID!
}

type AvatarV1 {
  id: ID!
  token: String
  organization: OrganizationV1
}

type TrustV1 {
  id: ID!
  limit: BigInt!
}

type CirclesV1 {
  id: ID!
  balance: BigInt!
}

type GlobalStatsV1 {
  id: ID!
  signups: BigInt!
  transfers: BigInt!
  trusts: BigInt!
}

# v2 schema

type Circles {
  # id is: id + address
  id: ID!
  balance: BigInt!
  avatar: Avatar!
}

type WrappedCircles {
  # id is: tokenAddress-useAddress
  id: ID!
  balance: BigInt!
  avatar: Avatar!
}

type Avatar {
  id: ID!
  stopped: Boolean!
  circles: [Circles!]! @derivedFrom(field: "avatar")
  wrappedCircles: [WrappedCircles!]! @derivedFrom(field: "avatar")
  trusts: [Trust!]! @derivedFrom(field: "truster")
  lastMint: BigInt!
  inviter: String
  organization: Organization
  group: Group
}

type Organization {
  id: ID!
  name: String!
}

type Group {
  id: ID!
  mint: String!
  treasury: String!
  name: String!
  symbol: String!
}

type Trust {
  # truster-trustee
  id: ID!
  truster: Avatar!
  trustee: Avatar!
  expiry: BigInt!
  isMutual: Boolean!
}

type GlobalStats {
  id: ID!
  signups: BigInt!
  transfers: BigInt!
  trusts: BigInt!
}

# new schema

enum TransferType {
  Erc20WrapperTransfer
  TransferSingle
  TransferBatch
  StreamCompleted
  HubTransfer
  Transfer
}

type Transfer {
  # transaction hash
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  batchIndex: Int!
  # v1 or v2
  version: Int!
  # only for v2
  operator: String!
  from: String!
  to: String!
  value: BigInt!
  # transaction type; either: Erc20WrapperTransfer | TransferSingle | TransferBatch | StreamCompleted | HubTransfer | Transfer
  transferType: TransferType!
  # is either the v2 token-id or the v1 token address; both in address format
  token: String!
}

type TrustRelation {
  # transaction hash
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  version: Int!
  trustee: String!
  truster: String!
  # v2 only or always UInt256.MAX in case of v1
  expiryTime: BigInt!
  # v1 only or always '100' in case of v2
  limit: Int!
}

enum AvatarType {
  Signup
  OrganizationSignup
  RegisterHuman
  InviteHuman
  RegisterGroup
  RegisterOrganization
}

type Avatars {
  # the avatar address
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  transactionHash: String!
  version: Int!
  avatarType: AvatarType!
  invitedBy: String
  # v1 token address or equal to avatar address if v2
  tokenId: String
  # v2 wrapped token id
  wrappedTokenId: String
  # groups only
  name: String
  # IPFS CID of the avatar's profile
  cidV0Digest: String
}

enum TokenType {
  RegisterGroup
  RegisterHuman
  Signup
}

type Token {
  # token address
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  transactionHash: String!
  version: Int!
  tokenType: TokenType!
  tokenOwner: String!
}