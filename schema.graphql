type TransferV1 {
  id: ID!
  from: String!
  to: String!
  amount: BigInt!
}

type OrganizationV1 {
  id: ID!
}

type AvatarV1 {
  id: ID!
  token: String
  organization: OrganizationV1
}

type TrustV1 {
  id: ID!
  limit: BigInt!
}

type CirclesV1 {
  id: ID!
  balance: BigInt!
}

type GlobalStatsV1 {
  id: ID!
  signups: BigInt!
  transfers: BigInt!
  trusts: BigInt!
}

# v2 schema

type Circles {
  # id is: id + address
  id: ID!
  balance: BigInt!
  avatar: Avatar!
}

type Avatar {
  id: ID!
  stopped: Boolean!
  circles: [Circles!]! @derivedFrom(field: "avatar")
  lastMint: BigInt!
  inviter: String
  organization: Organization
  group: Group
}

type Organization {
  id: ID!
  name: String!
}

type Group {
  id: ID!
  mint: String!
  treasury: String!
  name: String!
  symbol: String!
}

type Trust {
  # truster-trustee
  id: ID!
  expiry: BigInt!
}

type GlobalStats {
  id: ID!
  signups: BigInt!
  transfers: BigInt!
  trusts: BigInt!
}